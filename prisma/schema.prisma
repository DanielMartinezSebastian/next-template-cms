// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// LOCALIZATION & TRANSLATIONS
// =============================================================================

model Locale {
  id        String  @id @default(cuid())
  code      String  @unique // e.g., "en", "es", "fr"
  name      String // e.g., "English", "Español", "Français"
  isDefault Boolean @default(false)
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations Translation[]
  pageContents PageContent[]

  @@map("locales")
}

model Namespace {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "home", "common", "admin"
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations Translation[]

  @@map("namespaces")
}

model Translation {
  id    String @id @default(cuid())
  key   String // e.g., "title", "welcome.message"
  value String

  // Foreign keys
  localeId    String
  namespaceId String

  // Metadata
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  usageCount Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  locale    Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade)
  namespace Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([key, localeId, namespaceId])
  @@index([localeId, namespaceId])
  @@index([key])
  @@map("translations")
}

// =============================================================================
// CONTENT MANAGEMENT - PAGES
// =============================================================================

model Page {
  id       String  @id @default(cuid())
  slug     String // e.g., "home", "about", "servicio1"
  isActive Boolean @default(true)

  // Hierarchical structure for nested routes
  parentId String? // Reference to parent page for nested routes
  fullPath String  @unique // Full computed path: /servicios/servicio1/oferta
  level    Int     @default(0) // Depth level in hierarchy (0 = root)
  order    Int     @default(0) // Order within same parent

  // Route type management for hybrid system
  routeType String @default("dynamic") // "static", "dynamic", "hybrid"

  // Static route integration
  staticRoute    String? // Next.js static route if hybrid: /app/terminos-y-condiciones
  isStaticPrefix Boolean @default(false) // true if this handles a static prefix

  // SEO & Meta
  template String? // Template type for rendering

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Self-referencing relation for hierarchy
  parent   Page?  @relation("PageHierarchy", fields: [parentId], references: [id])
  children Page[] @relation("PageHierarchy")

  // Relations
  contents   PageContent[]
  components PageComponent[]

  // Constraints for route uniqueness
  @@unique([slug, parentId]) // Slug unique within same parent
  @@index([parentId, order]) // Optimize hierarchy queries
  @@index([routeType]) // Filter by route type
  @@index([fullPath]) // Fast path lookups
  @@map("pages")
}

model PageContent {
  id       String @id @default(cuid())
  pageId   String
  localeId String

  // Content fields
  title           String
  description     String?
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Structured content (JSON)
  content Json? // Flexible content structure

  // Publishing
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  locale Locale @relation(fields: [localeId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([pageId, localeId])
  @@map("page_contents")
}

// =============================================================================
// COMPONENT SYSTEM
// =============================================================================

model Component {
  id   String @id @default(cuid())
  name String @unique // Component name: "CallToActionComponent", "ButtonComponent" 
  type String // Same as name for consistency: "CallToActionComponent"

  // Component classification
  category    String // Category: "marketing", "content", "interactive"
  description String?
  displayName String? // Human-readable: "Call to Action"

  // Component configuration
  defaultConfig Json? // User-customized default configuration
  propsSchema   Json? // Zod schema serialized to JSON
  editorConfig  Json? // Auto-generated editor fields configuration

  // Component metadata  
  icon       String? // UI icon (emoji or icon name)
  tags       String[] // Tags for search and filtering
  version    String   @default("1.0.0")
  deprecated Boolean  @default(false)
  isActive   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pageComponents PageComponent[]
  configs        ComponentConfig[]

  @@map("components")
}

// Component configuration history (simplified)
model ComponentConfig {
  id          String @id @default(cuid())
  componentId String

  // Configuration data
  config      Json // Configuration changes
  description String? // Change description
  version     Int     @default(1)

  // Metadata
  createdBy String? // User who made the change

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations  
  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([componentId, version])
  @@map("component_configs")
}

model PageComponent {
  id String @id @default(cuid())

  // References
  pageId      String
  componentId String

  // Layout & positioning
  order     Int     @default(0)
  isVisible Boolean @default(true)

  // Component instance configuration
  config Json? // Instance-specific configuration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  // Constraints
  @@index([pageId, order])
  @@map("page_components")
}

// =============================================================================
// SYSTEM & CONFIGURATION
// =============================================================================

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  description String?
  category    String? // e.g., "general", "seo", "integrations"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}
